plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
}

apply from: '../modules.gradle'


android {
    namespace 'com.android.mymindnotes.data'
    compileSdk 33

    defaultConfig {
        minSdk 24
        targetSdk 33

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }
}

dependencies {
    implementation(project(":core"))

    implementation "androidx.core:core-ktx:${coreKtxVersion}"
    implementation "androidx.appcompat:appcompat:${appCompatVersion}"
    implementation "com.google.android.material:material:${materialVersion}"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    implementation "com.squareup.retrofit2:converter-gson:${converterGsonVersion}"
    implementation "com.squareup.okhttp3:okhttp:${okhttpVersion}"
    implementation "com.squareup.okhttp3:logging-interceptor:${loggingInterceptorVersion}"

    // Hilt
    implementation "com.google.dagger:hilt-android:${hiltAndroidVersion}"
    kapt "com.google.dagger:hilt-compiler:${hiltCompilerVersion}"

    // Preference Datastore
    implementation "androidx.datastore:datastore-preferences:${datastorePreferencesVersion}"

    // Tests
    androidTestImplementation "androidx.test:core:${androidTestCoreVersion}"

    // Truth
    testImplementation "com.google.truth:truth:${truthVersion}"
    androidTestImplementation "com.google.truth:truth:${truthVersion}"
    androidTestImplementation "androidx.test.ext:truth:${truthExtVersion}"

    // Hamcrest library
    testImplementation "org.hamcrest:hamcrest-library:${hamcrestLibraryVersion}"
    androidTestImplementation "org.hamcrest:hamcrest-library:${hamcrestLibraryVersion}"

    // JUnit
    testImplementation "junit:junit:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterApiVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitJupiterEngineVersion}"
    androidTestImplementation "androidx.test.ext:junit:${androidTestJUnitExtVersion}"

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation "androidx.test:runner:${androidTestRunnerVersion}"
    androidTestImplementation "androidx.test:rules:${androidTestRulesVersion}"

    // MockK
    testImplementation "io.mockk:mockk:${mockkVersion}"

    // Test annotations and assertions
    testImplementation "org.jetbrains.kotlin:kotlin-test:${kotlinTestVersion}"

    // Coroutine Test
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${coroutinesTestVersion}"
}