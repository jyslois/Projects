안녕하세요.
"나의 마음 일지" 앱의 Database 선정에 대한 발표를 시작하겠습니다.
=========================================================
오늘의 목차는 다음과 같습니다. 
우선 데이터 베이스에 대해서 ㅡ 데이터 베이스가 무엇인지, 종류엔 뭐가 있는지, 비교시엔 어떤 개념이 중요한지를 먼저 살펴 볼 것이고요,
그 다음으로는 관계형 데이터 베이스와 비관계형 데이터베이스를 비교해서 그들의 특징은 무엇이고 장점 단점은 무엇인지 알아 볼 것이고요,
그것에 기반해서 "나의 마음 일지" 앱이 관계형 데이터 베이스를 써야 할지, 비 관계형 데이터베이스를 써야 할지 판단을 내려 볼 것이고요,
그 다음으로는 가장 많이 쓰이는 관계형 데이터베이스 다섯 개를 선정해서, 그들의 특징과 장단점에 대해서 간략하게 알아보고, 그 중에서 두 개의 후보를 추려서 둘의 차이점에 대해 자세히 알아 본 다음에,
마지막으로 "나의 마음 일지"앱이 최종적으로 어떤 데이터베이스를 써야 할지 결론을 내려보겠습니다. 
=========================================================
먼저 Database가 무엇인지 알아 보겠습니다. Database란, 개발하고자 하는 서비스를 위해 필요한 데이터를 체계적으로 저장하는 "데이터 저장소"입니다. 여러 사람이 공유하고 사용할 목적으로 통합 관리되는 정보의 집합이며, 자료를 구조화함으로서 검색과 갱신의 효율화를 꾀한 것입니다. 
=========================================================
Datbase는 크게 두 가지 종류로 나눌 수 있는데, MySQL, Oracle, PostgreSQL과 같은 Relational Database, 즉 관계형 데이터 베이스와 MongoDB, DynamoDB같은 NoSQL, 즉 비관계형 데이터베이스로 나눌 수 있습니다. "나의 마음 일지"는 관계형 데이터베이스를 써야 할까요, 아니면 비관계형 데이터베이스를 써야 할까요. 
=========================================================
그것을 알아보기 위해서는 두 종류의 데이터베이스를 비교해야 하는데, 이때 알아야 할 중요할 개념 두 가지를 먼저 알아보겠습니다. 

첫번째 개념은 Scaling입니다. Scaling이란 데이터베이스 서버의 확장성을 의미하는데, 수직성 확장과 수평성 확장이 있습니다. 수직성 확장은 단순히 CPU 같은 부품을 추가하거나 교체해서 데이터베이스 서버의 성능을 향상시키는 것입니다. 반면, 수평적 확장은 더 많은 서버를 추가하고 데이터베이스를 전체적으로 분산시키는 것입니다.
=========================================================
두번째 개념은 Transaction과 ACID입니다. 
Transaction이란 "데이터베이스 내에서 수행되는 작업의 최소 단위"입니다. 예를 들어 은행 시스템을 생각해 보시면 됩니다. 이체를 위해서 출금을 하고 입금을 했는데, 출금만 이루어지고 입급이 이루어지지 않으면 큰 문제가 발생하겠지요. 그래서 출금과 입금은 한 단위, 트린젝션으로 수행되어야 합니다. 이처럼 트렌섹션은 데이터베이스의 무결성을 유지하면서 상태를 변화시키는 기능을 수행해야 하는데, 이를 위해서는 ACID라는 트랜잭션이 안전하게 수행되는 것을 보장하는 규칙 네 가지를 만족해야 합니다.

첫째. 원자성. Atomicity(원자성)이란 트랜잭션에 포함된 작업은 전부 수행되거나 전부 수행되지 않아야된다는 규칙입니다. 예를 들어 이체를 위해 출금을 했으면 입금도 되어야 하며, 아니면 출금과 입금 둘다 일어나지 않아야 합니다.

둘째. 일관성. Consistency(일관성)이란 트랜잭션이 실행을 성공적으로 완료하면 언제나 일관성이 있는 데이터베이스 상태로 유지해야 함을 뜻힙니다. 즉, DB는 여러 제약 조건에 맞는 상태를 보장해주어야 합니다. 예를 들어서, 송금 전후 모두 전액의 data type은 언제나 integer이어야 하고, 계좌 잔액이 마이너스이면 출금이 이루어지지 않도록 해야 합니다.

셋째. 고립성. Isolation(고립성)이란 여러 트랜젝션이 동시에 수행될 때, 각 트랜잭션이 다른 트랜잭션의 연산작업이 끼어들지 못하도록 보장하여 독립적으로 작업을 수행해야 함을 뜻합니다. 예를 들면 A 계좌에서 출금되고, B 계좌에 아직 입금되지 않은 상태를 다른 트랜잭션이 조회할 수 없어야 합니다. 

넷째. 지속성. Durability(지속성)이란 성공적으로 수행된 transaction은 데이터베이스에 영원히 반영되어야 함을 의미합니다. 즉, transaction이 완료되어 저장이 된 데이터베이스는, 저장 후에 생기는 정전, 장애, 오류 등에 영향을 받지 않아야 합니다. 예를 들어, 한번 송금이 성공하면 은행 시스템에 문제가 생기더라도 송금이 성공한 상태로 복구할 수 있어야 합니다. 
=========================================================
그럼 이제 본격적으로 관계형 데이터베이스와 비관계형데이터베이스를 비교해 보도록 하겠습니다.

먼저 관계형 데이터베이스에서는 데이터가 정해진 데이터 스키마, 즉, 정해진 구조에 따라서 저장됩니다. 각 테이블마다 명확하게 정의된 구조가 있어서, 이 정의된 스키마를 따르는 데이터만 추가가 가능하다고 합니다. 반면 비관계형데이터베이스에서는 정해진 스키마가 없습니다. 다른 구조의 데이터를 같은 컬렉션에 추가가 가능합니다.

또한 관계형 데이터베이스에서는 데이터의 중복을 피하기 위해서 관계를 이용해서 여러 테이블에 분산시킵니다. 하나의 테이블에서 중복없이 하나의 데이터만을 관리합니다. 반면 비관계형 데이터베이스에서는 데이터를 여러 테이블에 나누어 담는 것이 아니라, 관련 데이터를 동일한 ‘컬랙션＇에 넣을 수도 있고, 동일한 데이터를 여러 컬렉션에 걸쳐서 넣을 수도 있습니다. 즉, 데이터가 중복되어서 서로에게 영향을 줄 위험이 있습니다.

그럼 이런 특징들로 인해서 각 종류의 데이터베이스가 가지는 장단점은 무엇일까요?
===========================================================
관계형 데이터베이스는 관계를 이용해서 각 데이터를 중복 없이 한 번만 저장하기 때문에, 데이터의 무결성이 보장됩니다. 때문에 데이터 업데이트가 용이하다는 장점이 있습니다. 반면, 데이터 스미카가 엄격하게 지정되어 있기 때문에 나중에 수정하기가 힘들고, Transaction과 ACID를 지원하기 때문에 대체적으로 수직적 확장만 가능합니다. 멀티 서버로 수평확장을 하게 되면 테이블 조인을 위해 복잡한 과정이 필요하고, ACID을 준수하면서 RDB를 수평적으로 분할하는 것은 쉽지 않기 때문입니다. 결론적으로 이와 같은 장단점 때문에, 관계형 데이터베이스는 데이터 구조가 명확하고 변경될 여지가 없는 경우, 그리고 데이터 업데이트가 잦은 경우에 사용하면 좋습니다.

이제 비관계형 데이터베이스를 살펴보겠습니다. 비관계형 데이터베이스의 장점은 스키마가 없어서 유연하다는 것입니다. 언제든지 저장된 데이터를 조정하고, 새로운 필드를 추가할 수 있습니다. 또한 Transaction과 ACID을 지원하지 않기 때문에, 수평적 확장도 용이하다는 장점이 있습니다. 반면 데이터가 여러 컬렉션에 중복되어 있기 때문에, 수정 시에 모든 컬렉션에서 수정해야 해서 데이터 중복을 계속 업데이트 해야 한다는 단점이 있습니다. 결론적으로, 비관계형 데이터 베이스는 정확한 데이터 구조가 정해지지 않았거나 변경이나 확장이 될 수 있는 경우, 데이터 update가 자주 이루어지지 않고 조회가 많은 경우, 또 데이터 양이 매우 많아 수평적 확장이 필요할 것으로 예상되는 경우에 사용하면 좋습니다.
===========================================================
두 데이터베이스의 차이점을 살펴 보았을 때, 저는 "나의 마음 일지" 앱이 관계형 데이터 베이스를 사용하는 것이 적합하다고 판단했고, 그 이유는 다음과 같습니다. 

첫째, "나의 마음 일지"는 일기 애플리케이션입니다. 감정-상황-생각-회고로 이루어져 있는 일기 작성 형식(즉, 데이터의 스키마)가 명확하고 변경의 여지가 없으며, 이는 서비스기획 차원에서 매우 중요합니다. 따라서 명확한 스키마를 준수하는 관계형 데이터 베이스에 적합합니다.

둘째, "나의 마음 일지" 앱에서는 사용자가 일기 내용을 작성한 직후에, 또는 일기 모음 화면에서 선택 후에 일기 내용을 수정할 수 있기 때문에, 데이터 변경이 자주 있을 수 있습니다. 만약 비관게형데이터베이스를 사용한다면 수정 시에 데이터가 중복되는 모든 콜렉션에서 수정을 해야 하기 때문에 비효율적입니다. 따라서 데이터 중복이 없고 데이터 업데이트가 용이한 관계형데이터베이스가 적합합니다.

셋째, "나의 마음 일지" 앱은 대중적이기보다는 우울증을 앓고 있는 20-30대를 타겟으로 한 일기 앱으로, 배포 시에 예상 이용자 수가 많을 것으로 예상되기 때문에, 막대한 양의 데이터를 다룰 일이 없고 따라서 수평적 확장의 필요성이 있을 가능성이 희박합니다. 따라서 수직적 확장만 가능한 관계형데이터베이스를 써도 무방하다고 판단됩니다.

결론적으로, "나의 마음 일지" 앱은 데이터 구조가 명확하여 변경될 여지가 없고, 데이터 업데이트가 많을 것으로 예상되며, 수평적 확장의 필요성이 희박하다고 예상되므로, 데이터 중복이 없고 데이터 업데이트가 많을 때 유리한 SQL 비관계형데이터베이스를 사용하는 것이 적합하다고 판단했습니다. 
===========================================================
그럼 관계형 데이터베이스 중에서는 어떤 것을 사용하는 것이 좋을까요?
전세계적으로 가장 많이 사용되는 관계형 데이터베이스 시스템 다섯 가지를 간략하게 살펴보도록 하겠습니다.

먼저 전세계적으로 가장 많이 활용되는 데이터베이스 시스템 Oracle입니다. 오라클은 오픈소스가 아닌 대신 그만큼 보안성이 높아서, 제조권, 금융권 등 오픈소스 데이터베이스를 쓸 수 없는, 극한의 신뢰성이 요구되는 환경에서 널리 사용되고 있다고 합니다. 또한 대규모 데이터베이스를 지원해서, 대형화된 데이터를 관리하기에 최적화되어 있습니다. 하지만 Standard Package 가격이 23,000 달러인데다가 유지보수 비용이 그 가격의 22%인, 연 5070 달러라고 합니다. 또한 오라클은 메모리를 많이 먹기 때문에 구동에 고사양의 장비가 필요하다고 하는데요, 실제로 오라클을 사용하는 한국 기업들을 대상으로 애로사항을 조사해본 결과, 가장 큰 애로사항이 '비용'으로 밝혀졌습니다. 

다음으로는 MySQL입니다. MySQL은 오픈소스이고, mySQL 내부 소스를 변경하거나 다른 소프트웨어에 포함시켜서 외부에 영리적인 목적으로만 판매하지 않는다면, 일반 기업에서도 General Public License, 즉 일반 공중 사용 허가서를 받아서 무료로 사용할 수 있습니다. 또한 소규모 장비를 확장해서 사용하기 때문에 데이터 저장 시에 드는 비용도 저렴하고 유지관리 비용도 저렴해서 중소기업에서도 많이 사용한다고 합니다. 속도와 안정성을 추구하지만, 그 대신 다른 DB에 비해서 기능이 풍부하지 않고, 로드가 많거나 복잡한 쿼리에 대해서는 성능이 저하된다고 합니다.

Microsoft의 MySQL Server은 Windows에 특화되어 있다는 게 특징입니다. 또한 ACID을 완벽하게 준수하는 엔진을 사용해서 안정성이 뛰어나고, 또 속도도 준수하다고 합니다. 하지만 패키지의 가격이 $13,748 달러로 비싼 가격이 단점이고, 운영체제가 제한되어 있다는 점, 그리고 대규모 데이터베이스에는 적합하지 않다는 점 또한 단점입니다. 

다음은 PostgreSQL입니다. 오픈소스이며, 상업적인 용도로 사용하더라도 무료인 것이 장점입니다. 또한 PostgreSQL은 복잡한 쿼리와 대규모 데이터베이스를 다룰 수 있는 기능이 풍부하다고 합니다. 때문에 복잡한 쿼리에서는 우수한 성능을 보이지만, 기본적인 CRUD성능은 MySQL 등 경제 DB에 비해 좋지 않은 것이 단점이라고 해요. 

마지막으로 DB2입니다. DB2는 데이터 압축 기술이 좋아서 대형화된 데이터를 다루는데 최적화되어 있다고 합니다. 이 때문에 많은 중견기업, 대기업이 DB2를 사용한다고 해요. 또한 최근에는 AI기능이 추가되어서 Data Science 및 AI 기술을 채택하여 경쟁 차별화를 가지고 있다고 합니다. 하지만 DB2역시 $13,651달러의 패키지 가격과 비싼 유지보수 비용이 큰 단점입니다.
============================================================
현재 "나의 마음 일지" 앱에는 투자금이 없는 상황입니다. 따라서 유로 Database를 사용할 수 없습니다. 또한 이 앱은 은행 앱처럼 보안이 최고로 여겨져야 하는 앱은 아니거니와, 배포 시에 예상 이용자수가 많지 않기 때문에 당장 규모가 큰 데이터를 다루어야 하는 것도 아니라서, 값비싼 Oracle이나 MS SQL, DB2를 사용해야 할 이유도 없습니다. 따라서 이 셋은 후보에서 제외시키고, 무료 DBMS인 MySQL과 PostgreSQL을 최종 후보로 추려서 이 둘 중에서 고민해 보도록 하겠습니다.
=============================================================
먼저 PostgreSQL의 장점이 복잡한 쿼리와 대규모 데이터 베이스를 다룰 수 있는 풍부한 기능인 반면, MySQL의 단점은 기능이 풍부하지 않는 것이라고 하는데, 정말로 그런지 알아보겠습니다. 

먼저 PostgresSQL은 전체 데이터의 부분 집합에 대해서만 인덱스를 생성하는 기능인 partial index를 지원하는 반면, MySQL은 해당 기능을 지원하지 않습니다. "우아한 형제" 기술 블로그에서 이 둘의 인덱스 크기를 비교해 보았는데, 10배 정도의 차이가 있었다고 합니다. 필요한 부분만 인덱스를 생성할 수 있다는 것은 저장공간에 대한 이점도 크고 데이터 삭제, 추가, 갱신에 따른 인덱스 유지관리 비용도 절약된다는 것을 의미합니다. 또한 PostgreSQL은 더 빠른 인덱스 생성을 위한 병렬처리도 지원한다고 합니다. 
또한 PostgreSQL은 JSON 및 XML, NoSQL, Json 인덱싱을 모두 지원하는 반면, MySQL은 일부 기능만 지원한다고 합니다. 
Join에 대한 부분 역시 PostgreSQL은 SORT JOIN은 지원하는 반면, MySQL은 지원하지 않고요,
PostgreSQL은 NoSQL과는 다르게 Object Related DBMS, 즉 객체관계형이라서 개발자가 기존 데이터 타입에서 확장된 타입 형태를 자유롭게 정의해서 사용할 수 있고, 또 테이블 상속 기능도 제공되어서 자식 테이블을 부모 테이블로부터 열을 받아서 사용할 수도 있다고 합니다. 

이처럼 Postgres가 MySQL에 비해서 기능, 특히 복잡한 쿼리와 대규모 데이터 베이스를 다룰 때 유용한 기능들이 풍부하다는 것이 사실로 확인되었습니다. 
=============================================================
다음으로는 성능입니다. MySQL은 기본적으로 속도와 안정성을 추구하는 대신 로드가 많거나 복잡한 쿼리에서는 성능이 저하된다는 단점이 있는 반면, PostgreSQL은 복잡한 쿼리에선 우수한 성능을 보이지만 기본적인 CRUD 성능이 MySQL에 비해 떨어진다고 하는데, 이것이 사실인지 알아보도록 하겠습니다.
=============================================================
먼저 2016년 우버의 공식 블로그에 왜 그들이 Postgres에서 MySQL로 바꾸었는지를 기술한 article 중에 일부분을 살펴 보며, PostgreSQL와 MySQL의 핵심 아키텍쳐에는 어떤 차이점이 있는지 알아보겠습니다. 

Postgres의 핵심 디자인 관점 중 하나는 변경 불가능한 불변의 로우 데이터(immutable row data)입니다. 이런 불변 로우들을 Postgres 용어로 튜플이라고 부르는데, 위에 그림을 보시면 Postgres에서 Primary Key 인덱스와 보조 인덱스들 모두 디스크의 튜플 오프셋에 직접적으로 연결되어 있다는 것을 알 수 있습니다. 이 때문에 쓰기 작업을 할 때 write amplication, 즉 쓰기 증폭이 발생하는데, 튜플의 위치가 변경되면 튜플과 연결된 모든 인덱스에도 업데이트가 일어나기 때문입니다. 
반면, MySQL의 아키텍쳐를 보시면 간접 레이어로 보조 인덱스 레코더 포인터가 PK인덱스 레코드를 바라보고, PK인덱스만 on-disk row에 위치하는 것을 알 수 있습니다. 때문에 만약 로우 오프셋이 바뀌더라도, pk인덱스만 업데이트하기 때문에 쓰기 증폭이 발생하지 않습니다. 

또한 Postgre와 MySQL은 Update 방식에서도 차이가 있습니다. MySQL은 Undo segment 방식으로 업데이트시에 새로운 값으로 교채가 되는 방면, PostgreSQL은 update시에 내부적으로 새 행이 추가되고 이전 데이터는 삭제 표시가 되기 때문에 행이 업데이트될 때 변경된 위치값에 대한 인덱스 정보도 모두 업데이트가 필요하다고 합니다. 

결론적으로 둘의 이런 구조적인 차이 때문에 PostgreSQL은 기본적인 CRUD 작업, 특히 Update 작업 시에 성능이 MySQL보다 떨어질 수 밖에 없다고 합니다. 
==============================================================
이런 구조적 차이가 정말로 성능에 영향을 미치는지 보기 위해서 추가적으로 조사했습니다. 2021년에 우아한 형제들이 PostgreSQL로 갈아탈지를 고민하며 쓴 글에서 가져온 자료입니다. 단순한 CRUD 쿼리를 테스트해 본 결과, 예상했던 대로 MySQL이 성능결과가 좋았습니다. 앞서 살펴본 내용처럼 PostgreSQL의 업데이트 방식이 성능차이의 큰 요인으로 작용하는 것으로 보입니다. 이런 차이 때문에 PostgreSQL은 보통 Insert, Select 위주의 서비스에 사용하는 것이 선호되고 있다고 합니다.

반면 복잡한 쿼리를 테스트해 보았을 때는, PostgreSQL가 MySQL보다 7배 이상 빠른 속도를 보여 주었습니다.

결론적으로, MySQL은 기본적인 CRUD에서 더 좋은 성능을, MySQL은 복잡한 쿼리에서 더 좋은 성능을 보인다는 것이 사실인 것이 확인되었습니다.
===============================================================

결론입니다.

앞서 보여드렸듯이, PostgreSQL은 복잡한 쿼리에 대한 기능과 성능이 MySQL보다 좋은 대신, 구조적인 특성으로 인한 쓰기 증폭 문제와 업데이트 방식 때문에 단순 CRUD의 성능, 특히 Update 성능이 MySQL에 비해 떨어집니다. 반면, MySQL은 복잡한 쿼리에 관한 성능이나 기능이 PostgreSQL에 비해 떨어지는 대신, 단순 CRUD 쿼리 성능이 PostgreSQL보다 좋습니다. 

그렇다면 "나의 마음 일지"는 어떤 선택을 해야 할까요? 이것은 "나의 마음 일지"가 어떤 앱인지를 생각해 보면 알 수 있습니다.

첫째, "나의 마음 일지"는 CRUD가 빈번하게 일어나는 "일기 앱"입니다. 차분하게 일기를 작성하고 작성 후에도 수정할 수 있는 기회를 줌으로서 생각과 마음을 정리하는 것을 돕는 것이 서비스 기획 의도 차원에서 중요하기 떄문에, 일기를 쓰고 읽고 지우는 것 만큼이나 수정, 즉 "UPDATE 기능"도 매우 중요한 앱입니다.  
둘째, "나의 마음 일지"는 단순한 일기 서비스이고 배포 시에 예상 이용자 수가 많지 않으므로, 복잡한 쿼리나 대규모 데이터 베이스를 다룰 가능성이 희박합니다. 때문에 그를 위한 풍부한 기능이 필요한 상황은 아닙니다. 

그러므로 "나의 마음 일지"는 대규모 데이터 베이스나 복잡한 쿼리에 대한 성능이나 다양한 기능보다는, 단순한 CRUD에 대한 성능을 우선시해야 합니다. 

따라서 이런 "나의 마음 일지"의 현재 상황을 종합적으로 고려해 보았을 때, 최종적으로 가장 적합한 Database는 MySQL입니다. 